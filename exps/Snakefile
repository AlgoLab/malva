configfile: "config.yaml"

import os

### Folders
resources = config["resources"]
folds = resources["folds"]
root_fold = folds["root"]

# Input
refs_foldname = folds["refs"] 
refs_fold = os.path.join(root_fold, refs_foldname)
vcfs_foldname = folds["vcfs"] 
vcfs_fold = os.path.join(root_fold, vcfs_foldname)
samples_foldname = folds["samples"] 
samples_fold = os.path.join(root_fold, samples_foldname)
big_bam = resources["big_bam"]

# Output
truth_sample = resources["truth_sample"]
truth_fold = os.path.join(root_fold, truth_sample)
res_foldname = folds["res"]
res_fold = os.path.join(root_fold, res_foldname)
kmc_foldname = folds["kmc"]
malva_outfold = folds["malva_out"]

# Tools
tools_fold = os.path.join(root_fold, folds["tools"])
malva_fold = os.path.join(tools_fold, resources["malva"])


### Data
# Chromosomes
chroms = []
for chrom in resources["chroms"]:
    chroms.append(chrom)

# Types of VCF
vcf_types = []
for vcft in resources["vcf_types"]:
    vcf_types.append(vcft)

# Samples
samples = []
for sample in resources["samples"]:
    samples.append(sample)

### Product
# Small k
ks = [23, 27, 31, 35, 39, 41]

# Big K
Ks = [43, 47, 53, 57, 63]

### Rules
# Run rules
rule run_correct_sample:
    input:
        expand(os.path.join(samples_fold, "{chrom}.corrected.fq.gz"),
               chrom = chroms)

rule run_extract_truth_from_vcf:
    input:
        expand(os.path.join(truth_fold, "{chrom}.vcf.gz"),
               chrom = chroms)

rule run_kmc:
    input:
        expand(os.path.join(res_fold, "{chrom}", kmc_foldname, "k{K}.{sample}.kmc_suf"),
               chrom = chroms,
               K = Ks,
               sample = samples)

rule run_malva:
    input:
        # Malva (only true variants)
        expand(os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.vcf"),
               chrom = chroms,
               sample = samples,
               k = ks,
               K = Ks,
               vcf_type = vcf_types),
        # Malva (all variants, -a option)
        expand(os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.all.vcf"),
               chrom = chroms,
               sample = samples,
               k = ks,
               K = Ks,
               vcf_type = vcf_types)

# VCF rules
rule extract_spop_specific_vcf:
    input:
        vcf = os.path.join(vcfs_fold, "{chrom}.full.vcf.gz"),
        panel = os.path.join(vcfs_fold, "1kgen.v2.ALL.panel")
    output:
        os.path.join(vcfs_fold, "{chrom}.EUR.vcf.gz")
    params:
        spop = "EUR",
        tmp_list = "{chrom}.sample.EUR.tmp"
    shell:
        """
        grep -P "\t{params.spop}\t" {input.panel} | cut -f 1 > {params.tmp_list}
        bcftools view -S {params.tmp_list} {input.vcf} | bgzip -c > {output}
        tabix -p vcf {output}
        rm {params.tmp_list}
        """

rule extract_truth:
    input:
        vcf = os.path.join(vcfs_fold, "{chrom}.full.vcf.gz")
    output:
        truth = os.path.join(truth_fold, "{chrom}.vcf.gz")
    params:
        truth_sample = truth_sample
    shell:
        """
        bcftools view -s {params.truth_sample} {input.vcf} | bgzip -c > {output.truth}
        tabix -p vcf {output.truth}
        """

# Sample rules
rule extract_sample:
    input:
        bam = os.path.join(samples_fold, big_bam)
    output:
        sample = os.path.join(samples_fold, "{chrom}.original.fq.gz")
    params:
        mid_bam = os.path.join(samples_fold, "{chrom}.bam"),
        chrom = "{chrom}"
    log:
        time = os.path.join(samples_fold, "{chrom}.extraction.time"),
        out = os.path.join(samples_fold, "{chrom}.extraction.log")
    shell:
        """
        /usr/bin/time -v -o {log.time} samtools view -hb {input.bam} $(echo {params.chrom} | sed 's/chr//g') > {params.mid_bam} 2> {log.out}
        /usr/bin/time -v --append -o {log.time} samtools fastq {params.mid_bam} 2>> {log.out} | gzip -f -1 > {output.sample}
        gzip {params.mid_bam}
        """

rule correct_sample:
    input:
        os.path.join(samples_fold, "{chrom}.original.fq.gz")
    output:
        os.path.join(samples_fold, "{chrom}.corrected.fq.gz")
    params:
        fq = os.path.join(samples_fold, "{chrom}.corrected.fq")
    log:
        time = os.path.join(samples_fold, "{chrom}.correction.time"),
        out = os.path.join(samples_fold, "{chrom}.correction.log")
    shell:
        """
        /usr/bin/time -v -o {log.time} {tools_fold}/bfc/bfc -s 2g -t8 {input} 2> {log.out} > {params.fq}
        sed -i 's/\t/-/g' {params.fq}
        gzip -f -1 {params.fq}
        """

# KMC rule
rule kmc:
    input:
        sample = os.path.join(samples_fold, "{chrom}.{sample}.fq.gz")
    output:
        suf = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{k}.{sample}.kmc_suf")
    params:
        out_prefix = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{k}.{sample}"),
        tmp_fold = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{k}_{sample}_tmp"),
        k = "{k}"
    log:
        time = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{k}.{sample}.time"),
        out = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{k}.{sample}.log")
    shell:
        """
        mkdir -p {params.tmp_fold}
        /usr/bin/time -v -o {log.time} {malva_fold}/KMC/bin/kmc -m3 -k{params.k} -t1 {input.sample} {params.out_prefix} {params.tmp_fold} &> {log.out}
        rm -r {params.tmp_fold}
        """

# Malva rules
rule malva:
    input:
        ref = os.path.join(refs_fold, "{chrom}.fa"),
        vcf = os.path.join(vcfs_fold, "{chrom}.{vcf_type}.vcf.gz"),
        suf = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{K}.{sample}.kmc_suf")
    output:
        os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.vcf")
    params:
        kmc_prefix = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{K}.{sample}"),
        k = "{k}",
        K = "{K}"
    log:
        time = os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.time"),
        out = os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.log")
    shell:
        """
        /usr/bin/time -v -o {log.time} {malva_fold}/malva -k {params.k} -r {params.K} -c 1 {input.ref} {input.vcf} {params.kmc_prefix} > {output} 2> {log.out}
        """

rule malva_all_vars:
    input:
        ref = os.path.join(refs_fold, "{chrom}.fa"),
        vcf = os.path.join(vcfs_fold, "{chrom}.{vcf_type}.vcf.gz"),
        suf = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{K}.{sample}.kmc_suf")
    output:
        os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.all.vcf")
    params:
        kmc_prefix = os.path.join(res_fold, "{chrom}", kmc_foldname, "k{K}.{sample}"),
        k = "{k}",
        K = "{K}"
    log:
        time = os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.all.time"),
        out = os.path.join(res_fold, "{chrom}", malva_outfold, "k{k}.K{K}.{sample}.{vcf_type}.all.log")
    shell:
        """
        /usr/bin/time -v -o {log.time} {malva_fold}/malva -a -k {params.k} -r {params.K} -c 1 {input.ref} {input.vcf} {params.kmc_prefix} > {output} 2> {log.out}
        """
