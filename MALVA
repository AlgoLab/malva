#!/bin/bash

SCRIPT_NAME=$(basename $0)
BIN_NAME="malva"
EXECUTABLE="$(dirname $0)/${BIN_NAME}"
KMC_BIN="$(dirname $0)/KMC/bin/kmc"

DEFAULT_KSIZE=35
DEFAULT_REF_KSIZE=43
DEFAULT_ERR_RATE=0.001
DEFAULT_POP="EUR"
DEFAULT_MAX_COV=200
DEFAULT_BF_SIZE=4
DEFAULT_MAX_MEM=4

USAGE=$'\nUsage: '"${SCRIPT_NAME}"' [-k ksize] [-r Ksize] [-c min_coverage] [-s sample_coverage] [-n read_length] <reference> <variants> <sample> <out_vcf>
Preprocesses the VCF file and calls '"${BIN_NAME}"' and outputs to STDOUT a VCF containing the known variants in <sample>.

Arguments:
     -h              print this help and exit
     -k              size of the kmers to index (default:'"${DEFAULT_KSIZE}"')
     -r              size of the reference kmers to index (default:'"${DEFAULT_REF_KSIZE}"')
     -e              expected sample error rate (default:'"${DEFAULT_ERR_RATE}"')
     -p              population to consider while reading input VCF (default:'"${DEFAULT_POP}"')
     -c              maximum coverage for variant alleles (default:'"${DEFAULT_MAX_COV}"')
     -b              bloom filter size in GB (default:'"${DEFAULT_BF_SIZE}"')
     -m              max amount of RAM in GB - KMC parameter (default:'"${DEFAULT_MAX_MEM}"')

Positional arguments:
     <reference>     reference file in FASTA format
     <variants>      variants file in VCF format
     <sample>        sample file in FASTA/FASTQ format
'

reference=""
vcf=""
sample=""
k=${DEFAULT_KSIZE}
refk=${DEFAULT_REF_KSIZE}
erate=${DEFAULT_ERR_RATE}
pop=${DEFAULT_POP}
maxcov=${DEFAULT_MAX_COV}
bfsize=${DEFAULT_BF_SIZE}
maxmem=${DEFAULT_MAX_MEM}

while getopts "k:r:e:p:c:b:m:h" flag; do
    case "${flag}" in
        h) $(>&2 echo "${USAGE}")
           exit 1
           ;;
        k) k=${OPTARG}
           ;;
        r) refk=${OPTARG}
           ;;
        e) erate=${OPTARG}
           ;;
        p) pop=${OPTARG}
           ;;
        c) maxcov=${OPTARG}
           ;;
        b) bfsize=${OPTARG}
           ;;
        m) maxmem=${OPTARG}
           ;;
    esac
done

if [[ $# -lt $((${OPTIND} + 2)) ]]
then
    (>&2 echo "ERROR: Wrong number of arguments.")
    (>&2 echo "")
    (>&2 echo "${USAGE}")
    exit 1
fi

reference=${@:$OPTIND:1}
vcf_file=${@:$OPTIND+1:1}
sample=${@:$OPTIND+2:1}

kmc_tmp_dir=${sample}_malva_kmc_${refk}_tmp
kmc_out_prefix=${sample}_malva${refk}.kmercount

mkdir -p ${kmc_tmp_dir}
if [ ! -f ${kmc_out_prefix}.kmc_pre ] && [ ! -f ${kmc_out_prefix}.kmc_suf ]
then
    (>&2 echo  "[${SCRIPT_NAME}] Running KMC")
    ${KMC_BIN} -m${maxmem} -k${refk} -t1 -fm ${sample} ${kmc_out_prefix} ${kmc_tmp_dir} &> ${kmc_out_file}.log
else
    (>&2 echo  "[${SCRIPT_NAME}] Found KMC output")
fi

(>&2 echo "[${SCRIPT_NAME}] Running ${BIN_NAME}")
${EXECUTABLE} -k ${k} -r ${refk} -e ${erate} -p ${pop} -c ${maxcov} -b ${bfsize}  ${reference} ${vcf_file} ${kmc_out_prefix}

(>&2 echo "[${SCRIPT_NAME}] Cleaning up")
rm -rf ${kmc_tmp_dir}

exit 0
